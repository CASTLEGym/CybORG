from typing import Union
import re
from CybORG.Shared import Observation
from CybORG.Simulator.State import State

#from CybORG.Simulator.Actions import Action


from CybORG.Emulator.Actions.Velociraptor.SSHConnectionServerAction import SSHConnectionServerAction
from CybORG.Emulator.Actions.Velociraptor.SSHConnectionClientAction import SSHConnectionClientAction
import random 
import string
from pathlib import Path
from CybORG.Emulator.Observations.Velociraptor.ExploitObservation import ExploitObservation
from CybORG.Emulator.Actions.Velociraptor.VelociraptorAction import VelociraptorAction

credentials_file = "prog_client.yaml"

class ExploitAction:
   
   def __init__(self, credentials_file, hostname, remote_host_name=None,remote_username=None, remote_password=None,client_port=None,server_port=22):
        self.credentials_file=credentials_file
        self.hostname = hostname
        self.remote_hostname=remote_host_name
        self.remote_username=remote_username
        self.remote_password=remote_password
        self.client_port= client_port
        self.server_port= server_port
        print('-> server port:',server_port)
   def start_server(self): 
       ssh_connection_server_action = SSHConnectionServerAction(credentials_file=self.credentials_file,
                                                 hostname=self.hostname,
                                                 remote_hostname=self.remote_hostname,
                                                 remote_username=self.remote_username,
                                                 remote_password=self.remote_password,
                                                 client_port=self.client_port,
                                                 server_port=self.server_port)
       ssh_connection_server_observation = ssh_connection_server_action.execute(None)
       connection_key= ssh_connection_server_observation.connection_key
       return connection_key

   def run_command(self, connection_key,command='CLOSE'):
       ssh_connection_client_action = SSHConnectionClientAction(credentials_file=self.credentials_file,
                                              hostname=self.hostname,
                                              connection_key=connection_key,
                                              command=command)
       ssh_connection_client_observation = ssh_connection_client_action.execute(None)
       return ssh_connection_client_observation.Stdout
  
   def execute(self, state: Union[State, None]) -> Observation:
       if random.random() >= 0 :
         conn_key = self.start_server()
         out1=self.run_command(conn_key, "head -c 5012 /dev/urandom > cmd.sh && [ -s cmd.sh ] && echo 'File written.' || echo 'Failed to write.'  ")
         out2=self.run_command(conn_key,"ss -tunap | grep ':4444' ")
         print(out2, 'and its tyoe is:',type(out2))
         if out2=='':
           return  ExploitObservation(success=False,connection_key=conn_key,malicious_file_write=out1,ip_address_string=out2)
         else:
           return  ExploitObservation(success=True,connection_key=conn_key,malicious_file_write=out1,ip_address_string=out2)
       else: 
         return ExploitObservation(success= False) 

    
        
      



if __name__=="__main__":
    credentials_file = "prog_client.yaml"
    hostname="user-host-1"
    remote_hostname="10.10.10.13"
    remote_username="vagrant"
    remote_password="vagrant"
    client_port=4444

    exploit_action=ExploitAction(credentials_file,hostname,remote_hostname,remote_username,remote_password,client_port)
    
    observation=exploit_action.execute(None)
    print("Connection Key is:",observation.connection_key)
    print("Malicious file written:",observation.malicious_file_write)
    print("Exploit is:",observation.available_exploit)
    print("IP string is:",observation.ip_address_info,' and its type is:',type(observation.ip_address_info))
    print('Please clean the mess after test!!')
