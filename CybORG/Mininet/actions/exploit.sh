#!/bin/bash

# Function to check if the SSHConnectionServer is up
check_server_up() {
    local max_attempts=30
    local attempt=0
    while [ $attempt -lt $max_attempts ]; do
        local output=$(echo 'echo "Server check"' | /home/ubuntu/justinyeh1995/CASTLEGym/castle.2.venv/bin/python3 /home/ubuntu/justinyeh1995/CASTLEGym/CybORG/CybORG/Mininet/systems/scripts/SSHConnectionTerminalClient.py $conn_key 2>&1)
        # echo "Output: $output"
        if [[ "$output" != "SSHConnectionServer for connection key"* ]]; then
            return 0
        fi
        echo "Waiting for SSHConnectionServer to start... (Attempt $((attempt+1))/$max_attempts)"
        sleep 1
        attempt=$((attempt+1))
    done
    return 1
}

while getopts n:m:u:p:c: flag
do
    case "${flag}" in
        n) conn_key=${OPTARG};;
        m) ip=${OPTARG};;
        u) username=${OPTARG};;
        p) password=${OPTARG};;
        c) port=${OPTARG};;
    esac
done

echo "Remote IP: $ip"
echo "Connection Key is: $conn_key"
echo "Username: $username"
echo "Password: $password"
echo "Client Port: $port"

# Start the SSHConnectionServer
/home/ubuntu/justinyeh1995/CASTLEGym/castle.2.venv/bin/python3 /home/ubuntu/justinyeh1995/CASTLEGym/CybORG/CybORG/Mininet/systems/scripts/SSHConnectionServer.py -n "$conn_key" -m "$ip" -u "$username" -p "$password" -c "$port" -d -s 22 > /dev/null 2>&1 &

# Wait for the server to be up
if check_server_up; then
    echo "SSHConnectionServer is up and running"

    # Continue with the rest of the script
    file_written_cmd_output=$(echo 'head -c 5012 /dev/urandom > cmd.sh && [ -s cmd.sh ] && echo "File written." || echo "Failed to write."' | /home/ubuntu/justinyeh1995/CASTLEGym/castle.2.venv/bin/python3 /home/ubuntu/justinyeh1995/CASTLEGym/CybORG/CybORG/Mininet/systems/scripts/SSHConnectionTerminalClient.py "$conn_key")  

    ip_string_cmd_output=$(echo 'ss -tunap | grep ':$port'' | /home/ubuntu/justinyeh1995/CASTLEGym/castle.2.venv/bin/python3 /home/ubuntu/justinyeh1995/CASTLEGym/CybORG/CybORG/Mininet/systems/scripts/SSHConnectionTerminalClient.py "$conn_key")

    echo "Malicious file written is: $file_written_cmd_output"
    echo "IP String is: $ip_string_cmd_output"
else
    echo "SSHConnectionServer failed to start within the expected time"
    echo "Malicious file written is: "
    echo "IP String is: "
    exit 1
fi