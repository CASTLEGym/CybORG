import argparse
import inspect
import random
import json
import base64

from CybORG import CybORG

from CybORG.Emulator.Actions.Velociraptor.ExploitActionForMininet import ExploitAction

def parseCmdLineArgs ():
    # parse the command line
    parser = argparse.ArgumentParser ()

    # add optional arguments
    parser.add_argument ("-host", "--hostname", default="cpswtjustin", help="Hostname, use hostname to figure out hostname")
    parser.add_argument ("-remote", "--remote_hostname", default="0.0.0.0", help="Remote IP Address")
    parser.add_argument ("-data", "--additional_data", help="Additional data as base64 encoded JSON string")
    # parse the args
    args = parser.parse_args ()

    return args

if __name__ == "__main__":
    try: 
        parsed_args = parseCmdLineArgs ()
        
        # credentials_file = "/home/ubuntu/prog_client.yaml"
        path = str(inspect.getfile(CybORG))
        path = path[:-10]
        credentials_file = f"{path}/Mininet/actions/prog_client.yaml"  # @To-Do make it configurable
        
        hostname = parsed_args.hostname
        remote_hostname = parsed_args.remote_hostname
        remote_username ="root"
        remote_password ="1234"
        
        available_ports = {}
        if parsed_args.additional_data:
            json_str = base64.b64decode(parsed_args.additional_data).decode('utf-8')
            additional_data = json.loads(json_str)
            available_ports = additional_data['available_ports']
        
        client_port= random.choice(available_ports) #4444 # @To-Do how can we used a value in an object in a stateless script
        server_port=22
        
        print("Remote IP: ", remote_hostname)
        print("Client Port: ", client_port)
        
        exploit_action=ExploitAction(credentials_file,hostname,remote_hostname,remote_username,remote_password,client_port,server_port)
            
        observation=exploit_action.execute(None)
        
        """_summary_
        printing here in nessesary here cause this will be execute inside mininet, 
        which is a spawned process from the main proccess.
        In order to pass this info to main proccess, we will print it and parse it with result bundler.
        Add any useful info here, but to capture it, a corresponding parser in result bundler is needed as well.  
        """
        print("Success is:",observation.success)
        print("Connection Key is:",observation.connection_key)
        print("Malicious file written?:",observation.malicious_file_write)
        print("Exploit is:",observation.available_exploit)
        print("connection info string is:",observation.ip_address_info)
        print('Please clean the mess after test!!')
    
    except KeyboardInterrupt:
        print("Interrupted! Cleaning up before exiting.") 