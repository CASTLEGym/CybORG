import time
import pytest
import inspect
import logging

from CybORG.Mininet.CustomFactory import CybORGFactory
from CybORG.Mininet.MininetAdapter import MininetAdapter
from CybORG import CybORG
from CybORG.Agents import B_lineAgent
from CybORG.Shared import Observation

# Create a new CybORG instance
path = str(inspect.getfile(CybORG))
path = path[:-10]


# @pytest.fixture
# def cyborg():
#     cyborg_factory = CybORGFactory()
#     cyborg_dicts = cyborg_factory.create("wrap", B_lineAgent, "Scenario2")
#     cyborg = cyborg_dicts["unwrapped"]
#     return cyborg

def test_exploit_action():
    with MininetAdapter() as mininet_adapter:
        
        cyborg_factory = CybORGFactory()
        cyborg_dicts = cyborg_factory.create(type="wrap", red_agent=B_lineAgent, file_name="Scenario2")
        wrapped_cyborg = cyborg_dicts["wrapped"]
        
        wrapped_cyborg.reset()
        unwrapped_cyborg = wrapped_cyborg.env.env.env.env.env.env
        
        assert unwrapped_cyborg.environment_controller.state.link_diagram is not None

        mininet_adapter.set_environment(unwrapped_cyborg)

        try:
            mininet_adapter.reset()
        except Exception as e:
            print(f"Error starting MininetAdapter: {e}")
            exit(1)

        service = mininet_adapter.mapper.cyborg_host_to_ip_map.get("Op_Host1")
        red_action = f"ExploitRemoteService {service}"
        start_time = time.time()
        try:
            mininet_red_observation, red_reward = mininet_adapter.step(red_action,  agent_type="Red")
        except Exception as e:
            print(f"Error executing action: {e}")
            exit(1)
            
        logging.info(f"Time taken to execute action: {time.time() - start_time}")
            
        logging.info(f"Red observation: {mininet_red_observation}")
        
        assert isinstance(mininet_red_observation, Observation)
        assert mininet_red_observation.success.name in ["TRUE", "FALSE"]
